day01 
第一部分：AngularJS介绍以及简单使用
1. AngularJS是什么
	在Web开发领域，我们一般使用HTML作为前端页面元素的声明式语言，使用CSS技术作为展示样式的描述语言，Javascript作为业务处理交互的命令式语言。当我们构建非常复杂的Web应用时，纯粹而有限的HTML就显得非常不足，Javascript本身也会随着项目代码量的膨胀而难以维护和管理，研发工期和成本也会随之难以控制。这时候，我们一般使用一些类库（例如JQuery、Dojo等）或框架（例如Backbone、Ember、ExtJS等）来提升开发效率，进而降低项目的工期和成本，也方便后续的维护和管理。

	而AngularJS不仅是一个理念先进（逼格高）的前端开发框架，更是一种端对端（End to End）的解决方案。AngularJS遵从架构设计中的MVC模式，提倡展现、数据和逻辑处理组件的松耦合（类似Flex和WPF）。AngularJS通过指令技术对传统HTML实现了自然扩展，通过编译技术实现了数据模型与展现视图的双向自动同步，从而消除了前端开发中繁琐复杂的DOM操作（想想看那些一片片的selector）。最后再通过模块化设计解决了JS代码管理维护和按需加载的问题，解放了广大前端程序员（以及后端程序员）同胞完成前端开发任务的生产力。而且这种解耦本身，也对前端的自动化测试技术提供了良好的支持。
	AngularJS下载
	https://docs.angularjs.org/
		docs	文档
		i18n	国际化
		*.js 	AngularJS代码库以及其他模块库

	参考链接：
		http://stackoverflow.com/questions/14994391/thinking-in-angularjs-if-i-have-a-jquery-background
		http://docs.ngnice.com/guide/
2. AngularJS特点
	1) 上手简单：
		通过学习AngularJS的一些概念和常见用法，即可在不需要大量了解DOM操作的情况下开发前端Web应用。
	2) 开发效率：
		一方面AngularJS相对于传统前端开发能减少大量的操作代码（双向绑定、自动注入），另一方面也通过前后端分离、合理的模块化组织项目结构降低了耦合、使开发者更关注于每一个具体的逻辑本身，从而加快了开发速度，也利于提升系统的质量。
	3) 运行效率：
		纯静态化便于前后端的缓存优化，按需加载也降低服务端IO的压力。当然不得不提的是，如果双向绑定的数据对象数据过多，比如多于2000个，会导致浏览器页面的渲染速度较慢。对于这一点，由于一页内展示可见的区域有限、并且用户一个时间点能关注内容也有限，我们一般可以采用数据分页加载等方式降低一次绑定的数据对象数量。
	4) 适用范围：
		我们知道软件领域没有银弹，没有一种东西能解决一个大领域里的所有问题。所以，AngularJS也有自己的适用范围。比如像Web游戏、在线图形编辑等这些需要频繁操作DOM的前端，就不适合用AngularJS来开发。一般来说，AngularJS特别适合基于CRUD的业务系统Web应用的前端开发，而且幸运的是目前这个地球上绝大部分的Web应用是这种。

3. AngularJS历史
	AngularJS最初由Misko Hevery和Adam Abrons于2009年开发，后来成为了Google公司的项目。后来Abrons离开了AngularJS，但在Google工作的MiskoHevery和谷歌员工Igor Minar和Vojta Jina等继续开发和维护这个库。创始人MiskoHevery加入Google公司之前，曾在Intel、Xerox（施乐）、Sun和Adobe公司工作过，主要从事数据库/后端方面的工作。加入Google公司后，MiskoHevery开始转向自动化测试，AngularJS这项工作的主要目的是改进Google的开发者工作效率，从而改善代码库。

	AngularJS的起源还有个有趣的小故事。最开始的时候，Misko Hevery和Adam Abrons搞了一个做在线JSON存储服务的网站“GetAngular.com”，AngularJS就是为了这个项目开发的。虽然这个项目有了一些注册用户，但是两人还是决定把AngularJS作为一个开源库发行。2010年的时候，Misko Hevery参与Google Feedback项目。项目团队使用GWT进行开发，在花了6个月的时候以后，编写了17000行代码。随后，Misko Hevery花了3周将这17000行代码的程序使用AngularJS重写，结果是压缩成了令人吃惊的1500行，不到原来的十分之一。这引起了Google的重视，公司也开始资助其团队全职从事开发AngularJS。后来的事儿，大家都知道了。AngularJS越来越火，有了更多的支持，吸引了来自全球的千百名开源爱好者为AngularJS项目做出了贡献。随着项目的发展和广泛的传播，越来越多的开发者在自己的项目中选择使用AngularJS，学习和使用AngularJS已经成为了前端开发中的一股潮流。

4. AngularJS核心特性–JS的四个现代化
	1) MVC模式
		MVC全称是Model View Controller，即模型(model)－视图(view)－控制器(controller)的缩写，即在项目设计和代码结构里把业务和控制逻辑、数据模型、界面展示这三部分解耦，方便各部分单独编写和维护，而且在数据和界面发生变化时，对业务和控制逻辑影响最小，有时候甚至时不需要重新编写业务和控制逻辑。由于有这样的优点，MVC很快被广泛应用到各种不同平台上的带有业务处理的图形化用户界面中。

		模型（Model）
			数据模型层，负责程序中数据逻辑的部分，一般主要是读写数据库。这一块对终端用户是不可见的。
		视图（View）
			视图展示层，负责将数据以交互界面的形式展现为终端用户，视图一般是基于数据模型来组织的。这一块是软件中终端用户可以看到和操作的部分，比如前端开发使用HTML元素来实现UI界面。
		控制器（Controller）
			逻辑控制层，负责处理业务逻辑和控制逻辑，处理视图里的数据输入，向模型层发送数据，从模型层获取数据，将数据传递到视图层进行展示等等。一般来说控制器充当模型和视图的黏合剂角色。

		MVC特点
			职责清晰：MVC模式将原来都混在一起的复杂代码逻辑按不同的职责拆解成三个不同的部分，每一部分的职责和功能都相对单一，便于独立的设计和实现。

				代码分层模块化：我们知道将一个系统按业务功能竖向划分，就产生了不同的业务模块。而在同一个模块内，基于职责的横向拆解，项目代码结构就实现了分层的模块化（即我们常说的项目三层架构，3-Tier Architecture）。在这样的横切竖割以后，整个复杂的项目就被分解成了一个个非常小的模块结构，使得项目研发工作的计划安排和管理都很方便。
			
			耦合性低：将项目代码结构拆解到非常小的粒度以后，各个小的模块结构间依赖性降低，从而整个项目就降低了耦合性，整体复杂性也随之降低了。
			
			可重用性高：每个模块独立出来以后，抽象性更高，复用的可能性就更高。例如以前某个业务A中数据处理的代码都更界面UI的代码写在一起，除非其他模块B的数据和界面都跟一模一样才能复用业务A的这一块代码。现在我们把业务A按照MVC都拆解开以后，只要业务B的数据模型用的还是业务A背后的数据模型D，我们就可以在实现业务B的时候，把数据模型D复用、而不是重新写一遍。同理，视图层的一些表单经常也可以复用到不同的业务模块中去。
			
			可维护性高：代码干净了，不拖泥带水，发生变更时影响的范围最小，方便维护。结构清晰了，每块代码写到相应的目录结构下，有利于整个团队的项目大规模协同工作，同时新人加入团队或是新的团队接手项目，都会比较顺利。
			
			研发成本低：由于以上的优势，在项目规模比较大，UI和逻辑都相对复杂的情况下，MVC模式能明显地降低研发成本。

	2) 模块化
		在C++、Java里，我们通过Namespace、Package的方式隔离开了相同类名的类，而在Python里，我们可以进一步的使用Module来聚合一定功能的代码。这些设计使得我们可以按照自己的需要放置某些类在同样的一个层级组织之下。在AngularJS里，我们也可以显式的定义一个模块（Module），然后将某个功能模块的所有逻辑代码（函数、变量等），按照一定的规则和结构封装到这个Module中，从而规范了项目结构的组织方式，同时也避免了全局环境污染。

		大家在开始学习时可能会觉得AngularJS中有很多概念，有Module、有Directive、有Service、有Filter等等。大家一定要抓住一个点，一切都是从Module开始的。开始使用AngularJS开发时，要先考虑Module，只有先有了一个Module，才能在模式上调用Service、调用Directive等。这就是为什么AngularJS中Module很重要的原因。

	3) 指令系统
		指令系统（Directive）可以说是AngularJS中最有特色、最吸引人的功能特性。
		正常的html里写hello标签是不会被浏览器处理的，而在AngularJS里这么写就可以实现自定义的标签处理实现指令系统，这就像是JSP技术里的标签库。这样我们可以根据自己的需要，封装出来很多功能组件，做一大堆指令在需要的时候调用。

	4) 双向数据绑定
		AngularJS的第四个核心特性就是双向数据绑定，就是说数据模型层的变量可以绑定到前端视图层的内容上、前端视图层的内容上的数据也可以自动同步到数据模型层中去。目前大部分前端框架都只是实现了单向的数据绑定，比如jQueryUI、BackBone、Flex等。这也是吸引很多人使用AngularJS的一个重要原因。

		AngularJS认为视图和模型应该是绑定在一起的：当视图发生变化的时候，模型也自动发生变化；当模型发生变化的时候，视图自动会刷新显示新的内容。很显然这里需要借助一个事件机制来实现双方的协调一致。AngularJS一直监听数据和视图的变动事件，并在事件发生时将一方的变动内容同步到另一方，从而实现动态的、局部的、实时的刷新。一般情况下，我们在视图层使用表单收集用户录入的数据，所以表单这种视图是最容易发生变化的。

		单向绑定
		开发者将模板和数据合并起来加入到视图中去。合并完成之后，任何对数据模型或者相关内容的改变都不会自动反映到视图中去。更糟的是，用户对视图的任何改变也不会自动同步到数据模型中来。这意味着，开发者需要编写代码来保持视图与模板、模板与视图的同步。
		模板和数据	--------->	视图

		双向绑定
		任何视图中的改变都会立刻反映到数据模型中去，任何数据模型的改变都会传播到视图中去
		模板和数据	<-------->	视图

		在Angular网页应用中，采用的是数据的双向绑定。Angular的实现方式允许你把应用中的模型看成单一数据源。而视图始终是数据模型的一种展现形式。当模型改变时，视图就能反映这种改变，反之亦然。

5. HelloWorld编写

	<!DOCTYPE html>
	<html lang="en" ng-app="app">
	<head>
	    <meta charset="UTF-8">
	    <!--导入AngularJS库文件-->
	    <script type="text/javascript" src="angular-1.3.6/angular.min.js"></script>
	    <title>HelloWorld</title>
	    <script type="text/javascript">
	    	<!--初始化模块-->
	        var AppModel = angular.module("app",[]);

	        <!--创建控制器-->
	        AppModel.controller("OneController",function($scope){
	        	$scope.msg = "hello World"
	        });
	    </script>
	</head>
	<body ng-controller="OneController">
	    {{msg}}
	</body>
	</html>

6. 推荐项目结构
	app
		css
		framework
		imgs
		js
			app.js
			controllers.js
			directives.js
			filters.js
			services.js
		tpls
			a.html
			b.html
		index.html










-------------------------------------------------------------------------------------
	$scope是一个js对象
	$scope提供了一些工具方法 $watch $apply
	$scope是表达式的执行环境
	$scope是一个树形结构，与DOM标签平行，子$scope会继承父$scope的属性，一个AngularJS应用只有一个根$scope对象，一般位于ng-app上
	$scope可以传播事件，类似DOM事件，可以广播（向下），可以发射（向上）